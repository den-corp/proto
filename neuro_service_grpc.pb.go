// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: neuro_service.proto

package neuro_pic_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NeuroServoceClient is the client API for NeuroServoce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeuroServoceClient interface {
	GeneratePicture(ctx context.Context, in *GeneratePictureRequest, opts ...grpc.CallOption) (*GeneratePictureResponse, error)
}

type neuroServoceClient struct {
	cc grpc.ClientConnInterface
}

func NewNeuroServoceClient(cc grpc.ClientConnInterface) NeuroServoceClient {
	return &neuroServoceClient{cc}
}

func (c *neuroServoceClient) GeneratePicture(ctx context.Context, in *GeneratePictureRequest, opts ...grpc.CallOption) (*GeneratePictureResponse, error) {
	out := new(GeneratePictureResponse)
	err := c.cc.Invoke(ctx, "/neuroproto.NeuroServoce/GeneratePicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeuroServoceServer is the server API for NeuroServoce service.
// All implementations must embed UnimplementedNeuroServoceServer
// for forward compatibility
type NeuroServoceServer interface {
	GeneratePicture(context.Context, *GeneratePictureRequest) (*GeneratePictureResponse, error)
	mustEmbedUnimplementedNeuroServoceServer()
}

// UnimplementedNeuroServoceServer must be embedded to have forward compatible implementations.
type UnimplementedNeuroServoceServer struct {
}

func (UnimplementedNeuroServoceServer) GeneratePicture(context.Context, *GeneratePictureRequest) (*GeneratePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePicture not implemented")
}
func (UnimplementedNeuroServoceServer) mustEmbedUnimplementedNeuroServoceServer() {}

// UnsafeNeuroServoceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeuroServoceServer will
// result in compilation errors.
type UnsafeNeuroServoceServer interface {
	mustEmbedUnimplementedNeuroServoceServer()
}

func RegisterNeuroServoceServer(s grpc.ServiceRegistrar, srv NeuroServoceServer) {
	s.RegisterService(&NeuroServoce_ServiceDesc, srv)
}

func _NeuroServoce_GeneratePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroServoceServer).GeneratePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neuroproto.NeuroServoce/GeneratePicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroServoceServer).GeneratePicture(ctx, req.(*GeneratePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NeuroServoce_ServiceDesc is the grpc.ServiceDesc for NeuroServoce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeuroServoce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neuroproto.NeuroServoce",
	HandlerType: (*NeuroServoceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePicture",
			Handler:    _NeuroServoce_GeneratePicture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neuro_service.proto",
}
