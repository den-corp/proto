// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: neuroservice.proto

package neuro_pic_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NeuroServiceClient is the client API for NeuroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeuroServiceClient interface {
	GeneratePicture(ctx context.Context, in *GeneratePictureRequest, opts ...grpc.CallOption) (*GeneratePictureResponse, error)
}

type neuroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNeuroServiceClient(cc grpc.ClientConnInterface) NeuroServiceClient {
	return &neuroServiceClient{cc}
}

func (c *neuroServiceClient) GeneratePicture(ctx context.Context, in *GeneratePictureRequest, opts ...grpc.CallOption) (*GeneratePictureResponse, error) {
	out := new(GeneratePictureResponse)
	err := c.cc.Invoke(ctx, "/neuroproto.NeuroService/GeneratePicture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeuroServiceServer is the server API for NeuroService service.
// All implementations must embed UnimplementedNeuroServiceServer
// for forward compatibility
type NeuroServiceServer interface {
	GeneratePicture(context.Context, *GeneratePictureRequest) (*GeneratePictureResponse, error)
	mustEmbedUnimplementedNeuroServiceServer()
}

// UnimplementedNeuroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNeuroServiceServer struct {
}

func (UnimplementedNeuroServiceServer) GeneratePicture(context.Context, *GeneratePictureRequest) (*GeneratePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePicture not implemented")
}
func (UnimplementedNeuroServiceServer) mustEmbedUnimplementedNeuroServiceServer() {}

// UnsafeNeuroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeuroServiceServer will
// result in compilation errors.
type UnsafeNeuroServiceServer interface {
	mustEmbedUnimplementedNeuroServiceServer()
}

func RegisterNeuroServiceServer(s grpc.ServiceRegistrar, srv NeuroServiceServer) {
	s.RegisterService(&NeuroService_ServiceDesc, srv)
}

func _NeuroService_GeneratePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeuroServiceServer).GeneratePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neuroproto.NeuroService/GeneratePicture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeuroServiceServer).GeneratePicture(ctx, req.(*GeneratePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NeuroService_ServiceDesc is the grpc.ServiceDesc for NeuroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NeuroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neuroproto.NeuroService",
	HandlerType: (*NeuroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePicture",
			Handler:    _NeuroService_GeneratePicture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neuroservice.proto",
}
